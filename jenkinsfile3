pipeline {
    agent {label 'slave01'}
    stages {
        stage ('Coverity Analysis') {
            steps {
                dir("/workspace/workspace/DevSecOps-Synopsys"){
                withCredentials([usernamePassword(credentialsId: 'coverity', passwordVariable: 'password', usernameVariable: 'username')])             {
               sh '''
                    git checkout code
                    /opt/cov-analysis-linux64-2023.3.0/bin/cov-configure --java
                    /opt/cov-analysis-linux64-2023.3.0/bin/cov-build --dir /workspace/workspace/DevSecOps-Synopsys mvn clean package -Dcheckstyle.skip
                    /opt/cov-analysis-linux64-2023.3.0/bin/cov-analyze --dir /workspace/workspace/DevSecOps-Synopsys
                    /opt/cov-analysis-linux64-2023.3.0/bin/cov-manage-im --host 10.107.85.178 --mode streams --add --set name:DevOps-Synopsys -user $username -password $password || true
                    /opt/cov-analysis-linux64-2023.3.0/bin/cov-manage-im --host 10.107.85.178 --mode projects --add --set name:spring-petclinic --insert stream:DevOps-Synopsys  -user $username -password $password || true
                    /opt/cov-analysis-linux64-2023.3.0/bin/cov-commit-defects --host 10.107.85.178 --stream DevOps-Synopsys --dir /workspace/workspace/DevSecOps-Synopsys --user $username --password $password
                    curl -H "API-Key: api-key:cbMVPoTNX8D031A3cokTap-tJlyFSoywDLfcTFpJ" -X 'POST' 'http://10.107.85.162/codedx/api/tool-connector-config/entries/4/9/analysis' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"branch": "main"}'
                '''
              }
            }
          }
        }
        stage ('BlackDuck Analysis') {
            steps {
                dir("/workspace/workspace/DevSecOps-Synopsys"){
                withCredentials([string(credentialsId: 'BlackDuck-token', variable: 'SECRET')]) {
                sh '''
                    mvn -N io.takari:maven:wrapper
                    java -jar /opt/BlackDuck/synopsys-detect-8.8.0.jar --detect.project.name=spring-petclinic --detect.project.version=1.0.0 --blackduck.url=https://webserver/ --blackduck.api.token=$SECRET 
                    curl -H "API-Key: api-key:cbMVPoTNX8D031A3cokTap-tJlyFSoywDLfcTFpJ" -X 'POST' 'http://10.107.85.162/codedx/api/tool-connector-config/entries/4/11/analysis' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"branch": "main"}'
                '''
              } 
            }
          }
        }

        stage('Notify') {
            steps {
                mail body:"""STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
                 Check console output at '${env.BUILD_URL}input/'
                 Aborting build with this link: '${env.BUILD_URL}input/testid/abort'
                 Proceed build with this link: '${env.BUILD_URL}input/testid/proceedEmpty'""",
                 recipientProviders: [[$class: 'DevelopersRecipientProvider']]

                 'The Security Scan are complete. Please confirm to proceed with Deployment.',
                    subject: 'Confirmation Required',
                    to: 'georgechiu@palsys.demo.com.tw'
                input message: 'Confirm to proceed with Deployment?', ok: 'Proceed'
            }
        }

        stage("Publish to Nexus Repository Manager") {
            steps {
                dir("/workspace/workspace/DevSecOps-Synopsys"){
                nexusArtifactUploader artifacts: [[artifactId: 'spring-petclinic', classifier: '', file: './target/petclinic.war', type: 'war']], credentialsId: 'nexus-uploader', groupId: 'spring-petclinic', nexusUrl: '10.107.85.168:8081/repository/spring-petclinic-artifact/', nexusVersion: 'nexus3', protocol: 'http', repository: 'spring-petclinic-artifact', version: '3.5.0-SNAPSHOT'
             }
           }
	}

        stage ('login quay') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'quay', passwordVariable: 'password', usernameVariable: 'username')]) {
                sh '''
                    podman login quay.ocp4.redhat.poc:8443 --tls-verify=false -u $username -p $password
                '''
              } 
            }
        }
        stage ('login redhat') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'redhat', passwordVariable: 'password', usernameVariable: 'username')]) {
                sh '''
                    podman login registry.redhat.io --tls-verify=false -u $username -p $password
                '''
              }
            }
        }

        stage('Build container images') { 
            steps {
              dir("/workspace/workspace/DevSecOps-Synopsys"){
                sh 'podman build -t quay.ocp4.redhat.poc:8443/quayadmin/jboss-spring .'
                }
            }
	}		
        stage("Upload container images") {
            steps {
                sh '''
                    podman push quay.ocp4.redhat.poc:8443/quayadmin/jboss-spring
                '''
            }
         }

        stage ('login ocp') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'ocp', passwordVariable: 'password', usernameVariable: 'username')]){
               sh '''
                    /usr/local/bin/oc login https://api.ocp4.redhat.poc:6443 -u $username -p $password --insecure-skip-tls-verify
                '''
              }
            }
        }

        stage ('login argocd') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'argocd', passwordVariable: 'password', usernameVariable: 'username')]){
               sh '''
                    /usr/local/bin/argocd --insecure --grpc-web login openshift-gitops-server-openshift-gitops.apps.ocp4.redhat.poc --username $username --password $password
                '''
              }
            }
        }
        stage('Create spring-petclinic on ocp') { 
            steps {
                 sh '''
                      /usr/local/bin/oc delete all --selector app=spring-petclinic -n spring-petclinic
                      /usr/local/bin/argocd app create spring-petclinic --repo https://github.com/george-palsys/DevOps-Synopsys.git --revision manifest --path ArgoCD --dest-server https://kubernetes.default.svc --dest-namespace spring-petclinic --upsert 
                 '''
                }
            }
			
        stage("synsc spring-petclinic") {
            steps {
                sh '/usr/local/bin/argocd app sync spring-petclinic'  
            }
            }

	}
}
